// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(CREATOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creator   Creator?
  brand     Brand?
  sessions  Session[]

  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model Creator {
  id          String        @id @default(cuid())
  userId      String        @unique
  username    String        @unique
  displayName String
  bio         String?
  avatar      String?
  website     String?
  location    String?
  isVerified  Boolean       @default(false)
  status      CreatorStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     Content[]
  campaigns   Campaign[]
  earnings    CreatorEarning[]
  socialLinks SocialLink[]
  briefApplications BriefApplication[]
  contracts   Contract[]

  @@index([status])
  @@index([isVerified])
  @@index([createdAt])
  @@index([displayName])
  @@map("creators")
}

model Brand {
  id          String     @id @default(cuid())
  userId      String     @unique
  name        String
  description String?
  logo        String?
  website     String?
  industry    String?
  status      BrandStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns Campaign[]
  briefs   Brief[]
  contracts Contract[]

  @@index([status])
  @@index([createdAt])
  @@index([name])
  @@index([industry])
  @@map("brands")
}

model Content {
  id          String        @id @default(cuid())
  creatorId   String
  title       String
  content     String
  type        ContentType
  status      ContentStatus @default(DRAFT)
  isSponsored Boolean       @default(false)
  brandId     String?
  tags        String[]
  metadata    Json?
  publishedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  creator     Creator        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  brand       Brand?         @relation(fields: [brandId], references: [id])
  performance ContentPerformance[]
  distributions ContentDistribution[]
  reviews    ContentReview[]

  @@index([creatorId])
  @@index([status])
  @@index([type])
  @@index([isSponsored])
  @@index([brandId])
  @@index([publishedAt])
  @@index([createdAt])
  @@index([title])
  @@map("content")
}

model Campaign {
  id          String         @id @default(cuid())
  brandId     String
  creatorId   String
  title       String
  description String
  budget      Decimal
  status      CampaignStatus @default(DRAFT)
  startDate   DateTime?
  endDate     DateTime?
  requirements Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  brand   Brand   @relation(fields: [brandId], references: [id], onDelete: Cascade)
  creator Creator @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([brandId])
  @@index([creatorId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([createdAt])
  @@map("campaigns")
}

model ContentPerformance {
  id          String   @id @default(cuid())
  contentId   String
  platform    String
  views       Int      @default(0)
  clicks      Int      @default(0)
  shares      Int      @default(0)
  comments    Int      @default(0)
  likes       Int      @default(0)
  revenue     Decimal  @default(0)
  date        DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relations
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([platform])
  @@index([date])
  @@index([createdAt])
  @@map("content_performance")
}

model ContentDistribution {
  id          String   @id @default(cuid())
  contentId   String
  platform    String
  platformId  String?
  url         String?
  status      DistributionStatus @default(PENDING)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([platform])
  @@index([status])
  @@index([publishedAt])
  @@map("content_distributions")
}

model CreatorEarning {
  id          String   @id @default(cuid())
  creatorId   String
  amount      Decimal
  type        EarningType
  description String?
  contentId   String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relations
  creator Creator @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([type])
  @@index([date])
  @@index([createdAt])
  @@map("creator_earnings")
}

model SocialLink {
  id        String @id @default(cuid())
  creatorId String
  platform  String
  url       String
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())

  // Relations
  creator Creator @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([platform])
  @@index([isActive])
  @@map("social_links")
}

// New models for business workflows

model Brief {
  id          String      @id @default(cuid())
  brandId     String
  title       String
  description String
  requirements Json       // Detailed requirements, guidelines, assets
  budget      Decimal
  deadline    DateTime?
  status      BriefStatus @default(DRAFT)
  isPublic    Boolean     @default(false) // For marketplace vs private
  tags        String[]
  platforms   String[]    // Target platforms
  contentType ContentType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  brand        Brand             @relation(fields: [brandId], references: [id], onDelete: Cascade)
  applications BriefApplication[]
  contracts    Contract[]

  @@index([brandId])
  @@index([status])
  @@index([isPublic])
  @@index([contentType])
  @@index([deadline])
  @@index([createdAt])
  @@map("briefs")
}

model BriefApplication {
  id          String                @id @default(cuid())
  briefId     String
  creatorId   String
  proposal    String                 // Creator's proposal
  budget      Decimal                // Creator's proposed budget
  timeline    String?                // Proposed timeline
  status      ApplicationStatus      @default(PENDING)
  message     String?                // Additional message from creator
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  // Relations
  brief   Brief   @relation(fields: [briefId], references: [id], onDelete: Cascade)
  creator Creator @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([briefId])
  @@index([creatorId])
  @@index([status])
  @@index([createdAt])
  @@map("brief_applications")
}

model Contract {
  id          String         @id @default(cuid())
  briefId     String
  creatorId   String
  brandId     String
  title       String
  description String
  terms       Json            // Contract terms and conditions
  deliverables Json           // Deliverable specifications
  totalAmount Decimal
  status      ContractStatus  @default(DRAFT)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  brief        Brief           @relation(fields: [briefId], references: [id], onDelete: Cascade)
  creator      Creator        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  brand        Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  milestones   Milestone[]
  escrowPayments EscrowPayment[]

  @@index([briefId])
  @@index([creatorId])
  @@index([brandId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([createdAt])
  @@map("contracts")
}

model Milestone {
  id          String         @id @default(cuid())
  contractId  String
  title       String
  description String
  amount      Decimal
  status      MilestoneStatus @default(PENDING)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
  @@index([status])
  @@index([dueDate])
  @@index([completedAt])
  @@map("milestones")
}

model EscrowPayment {
  id          String           @id @default(cuid())
  contractId  String
  amount      Decimal
  status      EscrowStatus     @default(HELD)
  stripePaymentIntentId String?
  releaseReason String?        // Reason for release
  releasedAt  DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
  @@index([status])
  @@index([releasedAt])
  @@index([createdAt])
  @@map("escrow_payments")
}

model ContentReview {
  id          String           @id @default(cuid())
  contentId   String
  contractId  String?
  reviewerId  String           // Brand user ID
  status      ReviewStatus      @default(PENDING)
  feedback    String?
  rating      Int?              // 1-5 rating
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  content  Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contract Contract? @relation(fields: [contractId], references: [id])

  @@index([contentId])
  @@index([contractId])
  @@index([reviewerId])
  @@index([status])
  @@index([createdAt])
  @@map("content_reviews")
}

// Enums
enum UserRole {
  CREATOR
  BRAND
  ADMIN
}

enum CreatorStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REJECTED
}

enum BrandStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REJECTED
}

enum ContentType {
  ARTICLE
  VIDEO
  PODCAST
  SOCIAL_POST
  INFOGRAPHIC
  THREAD
  CAROUSEL
}

enum ContentStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  PUBLISHED
  REJECTED
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum DistributionStatus {
  PENDING
  PUBLISHED
  FAILED
  DELETED
}

enum EarningType {
  CPM
  CPC
  CPV
  REVENUE_SHARE
  BONUS
  COMMISSION
}

// New enums for business workflows
enum BriefStatus {
  DRAFT
  PUBLISHED
  CLOSED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ContractStatus {
  DRAFT
  PENDING_SIGNATURE
  ACTIVE
  COMPLETED
  CANCELLED
  DISPUTED
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
}

enum EscrowStatus {
  HELD
  RELEASED
  REFUNDED
  DISPUTED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  REVISION_REQUESTED
}
